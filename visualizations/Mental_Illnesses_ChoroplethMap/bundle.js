(function (React$1, ReactDOM, d3$1, topojson) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://unpkg.com/world-atlas@2.0.2/countries-50m.json';

  const useWorldAtlas = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.json(jsonUrl).then(topology => {
        const { countries, land } = topology.objects;
        setData({
          countries: topojson.feature(topology, countries),
          interiors: topojson.mesh(topology, countries, (a, b) => a !== b)
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/fmejias/8df2a27f1285576ae3cf4d67c3368144/raw/mental_health_disorders_unemployment_and_suicides.csv';

  const row = d => {
    d.Year = new Date(d.Year, 0);
    d.CountryPopulationWithMentalIllness = +d['TotalPercentageOfPopulation'];
    return d;
  };

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.csv(csvUrl, row).then(setData);
    }, []);

    return data;
  };

  const csvUrl$1 =
    'https://raw.githubusercontent.com/lukes/ISO-3166-Countries-with-Regional-Codes/master/slim-3/slim-3.csv';

  const useCodes = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3$1.csv(csvUrl$1).then(setData);
    }, []);

    return data;
  };

  const width = 960;
  const height = 500;

  const projection = d3$1.geoNaturalEarth1()
    .scale(120)
    .rotate([0, 0])
    .center([0, 0])
    .translate([width / 2, height / 2 - 40]);

  const path = d3$1.geoPath(projection);
  const graticule = d3$1.geoGraticule();

  const missingDataColor = 'black';

  const Marks = ({
    worldAtlas: { countries, interiors },
    rowByNumericCode,
    colorScale,
    colorValue,
  }) => (
    React.createElement( 'g', { className: "marks" },
      countries.features.map((feature) => {
        const d = rowByNumericCode.get(feature.id);

        return (
          React.createElement( 'path', { class: "country", fill: d ? colorScale(colorValue(d)) : missingDataColor, d: path(feature) }
            )
        );
      }),
      React.createElement( 'path', { className: "interiors", d: path(interiors) })
    )
  );

  const ColorLegend = ({ colorScale, 
                               tickSpacing = 20, 
                               tickSize = 10, 
                               tickTextOffset = 20}) =>
  	colorScale.ticks().map((t, i) => (
      // This line <g transform={`translate(0, ${i * 100})`}>
      // is used to add the vertical space of which each text
      // is going to be separated
      React.createElement( 'g', { className: "tick", transform: `translate(30, ${i * tickSpacing + 50})` },
        React.createElement( 'circle', { fill: colorScale(t), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" }, " ", t + "% - " + (2*(i+1)) + "%", " ")
      )
    ));

  const WorldMap = ({data, codes, selectedYear, worldAtlas}) => {
    	const numericCodeByAlphaCode = new Map();
      codes.forEach(code => {
        const alpha3Code = code["alpha-3"];
        const numericCode = code["country-code"];
        numericCodeByAlphaCode.set(alpha3Code, numericCode);
      });

      // Filter Data By Year 2017
      const filteredData = data.filter(d => d.Year.getFullYear() === selectedYear.getFullYear());

      const rowByNumericCode = new Map();
      filteredData.forEach(d => {
        const alpha3Code = d.Code;
        const numericCode = numericCodeByAlphaCode.get(alpha3Code);
        rowByNumericCode.set(numericCode, d);
      });
    
      // Country population that suffer a mental illness
      const colorValue = d => d.CountryPopulationWithMentalIllness;

      // Color scale 
      const colorScale = d3$1.scaleSequential(d3.interpolateBlues)
        .domain([0, d3$1.max(data, colorValue)]);
    
    	colorScale.domain().map((domainValue, i) => (
      	console.log(i)
      ));
    
      
      return ( 
        React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'g', { transform: `translate(20, 20)` },
          React$1__default.createElement( ColorLegend, {
            tickSpacing: 22, tickSize: 7, tickTextOffset: 12, colorScale: colorScale }),
          React$1__default.createElement( 'g', { className: "tick", transform: `translate(30, ${270})` },
            React$1__default.createElement( 'circle', { fill: "black", r: 7 }),
            React$1__default.createElement( 'text', { x: 12, dy: ".32em" }, " ", "Missing Data", " ")
          )
        ),
        React$1__default.createElement( Marks, {
          worldAtlas: worldAtlas, rowByNumericCode: rowByNumericCode, colorScale: colorScale, colorValue: colorValue })
          )
      );
   };

  const AxisBottom = ({
    xScale,
    innerHeight,
    tickFormat,
    tickOffset = 3,
  }) =>
    xScale.ticks().map((tickValue) => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', {
          style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, yAxisTickFormat, innerWidth, tickOffset = 3 }) =>
    yScale.ticks(4).map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const LineChartMarks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat,
    innerHeight,
    countryFilter,
    countries
  }) => (

  React$1__default.createElement( 'g', { className: "marks" },

    countries.map(country => {
      const filteredData = countryFilter(country);
      return React$1__default.createElement( 'path', {
        fill: "none", stroke: "black", d: d3$1.line()
          .x(d => xScale(xValue(d)))
          .y(d => yScale(yValue(d)))
          .curve(d3$1.curveNatural)(filteredData) })
     })
    
  )
    
  );

  function areEqual(prevProps, nextProps) {
    return true;
  }

  const MemoizedLineChartMarks = React$1__default.memo(LineChartMarks, areEqual);

  const margin = { top: 0, right: 30, bottom: 20, left: 50 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 30;

  const LineChart = ({
    data,
    selectedYear,
    width,
    height,
  }) => {
    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    
    // Get all countries names
    var countriesList = [];
    const getCountriesFromData = data.forEach(function (d) {
      countriesList.push(d.Entity);
    });

    // Get all unique countries names
    const uniqueCountriesList = Array.from(new Set(countriesList));

    // Filtered csv data by country name
    function filterByCountryName(countryName) {
      const filteredData = data.filter(function (d) {
        if (d['Entity'] == countryName) {
          return d;
        }
      });

      return filteredData;
    }

    const yValue = (d) => d.CountryPopulationWithMentalIllness;
    const yAxisLabel = 'Population with mental illness';

    const xValue = (d) => d.Year;
    const xAxisLabel = 'Years';
    const xAxisTickFormat = d3$1.timeFormat('%Y');

    const xScale = d3$1.scaleTime()
      .domain(d3$1.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3$1.scaleLinear()
      .domain(d3$1.extent(data, yValue))
      .range([innerHeight, 0])
      .nice();
    
    const yAxisTickFormat = yScale.tickFormat(5, "+%");

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'rect', { width: width, height: height, fill: "white" }),
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),
          React$1__default.createElement( 'text', {
            className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${
            innerHeight / 2
          }) rotate(-90)` },
            yAxisLabel
          ),
          React$1__default.createElement( AxisLeft, { yScale: yScale, tickFormat: yAxisTickFormat, innerWidth: innerWidth, tickOffset: 7 }),
          React$1__default.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
            xAxisLabel
          ),
          React$1__default.createElement( MemoizedLineChartMarks, {
            data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat, innerHeight: innerHeight, countryFilter: filterByCountryName, countries: uniqueCountriesList }),
          React$1__default.createElement( 'line', {
            x1: xScale(selectedYear), x2: xScale(selectedYear), y1: 0, y2: innerHeight, stroke: "black", 'stroke-width': "5" })
        )
      )
    );
  };

  const width$1 = 960;
  const height$1 = 500;
  const lineChartSize = 0.2;
  const margin$1 = { top: 0, right: 30, bottom: 30, left: 50 };
  const innerWidth = width$1 - margin$1.left - margin$1.right;

  const App = () => {
    const worldAtlas = useWorldAtlas();
    const data = useData();
    const codes = useCodes();
    const initialMousePosition = { x: innerWidth / 2, y: height$1 - 130 };
    const [mousePosition, setMousePosition] = React$1.useState(initialMousePosition);

    const handleMouseMove = React$1.useCallback(
      (event) => {
        const { clientX, clientY } = event;
        if (
          clientX > 0 &&
          clientX < width$1 - 130 &&
          clientY > 400 &&
          clientY < height$1
        ) {
          setMousePosition({ x: clientX, y: clientY });
        }
      },
      [setMousePosition]
    );

    if (!worldAtlas || !data || !codes) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }

    const xValue = (d) => d.Year;
    const xScale = d3$1.scaleTime()
      .domain(d3$1.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    // Get selected year by moving the vertical line
    const selectedYear = xScale.invert(mousePosition.x);

    return (
      React$1__default.createElement( 'svg', { width: width$1, height: height$1, onMouseMove: handleMouseMove },
        
        React$1__default.createElement( WorldMap, {
          data: data, codes: codes, selectedYear: selectedYear, worldAtlas: worldAtlas }),
        React$1__default.createElement( 'g', { transform: `translate(0, ${height$1 - lineChartSize * height$1})` },
          React$1__default.createElement( LineChart, {
            data: data, selectedYear: selectedYear, width: width$1, height: lineChartSize * height$1 })
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbInVzZVdvcmxkQXRsYXMuanMiLCJ1c2VEYXRhLmpzIiwidXNlQ29kZXMuanMiLCJXb3JsZE1hcC9NYXJrcy5qcyIsIldvcmxkTWFwL0NvbG9yTGVnZW5kLmpzIiwiV29ybGRNYXAvaW5kZXguanMiLCJMaW5lQ2hhcnQvQXhpc0JvdHRvbS5qcyIsIkxpbmVDaGFydC9BeGlzTGVmdC5qcyIsIkxpbmVDaGFydC9MaW5lQ2hhcnRNYXJrcy5qcyIsIkxpbmVDaGFydC9pbmRleC5qcyIsImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganNvbiB9IGZyb20gJ2QzJztcbmltcG9ydCB7IGZlYXR1cmUsIG1lc2ggfSBmcm9tICd0b3BvanNvbic7XG5cbmNvbnN0IGpzb25VcmwgPSAnaHR0cHM6Ly91bnBrZy5jb20vd29ybGQtYXRsYXNAMi4wLjIvY291bnRyaWVzLTUwbS5qc29uJztcblxuZXhwb3J0IGNvbnN0IHVzZVdvcmxkQXRsYXMgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAganNvbihqc29uVXJsKS50aGVuKHRvcG9sb2d5ID0+IHtcbiAgICAgIGNvbnN0IHsgY291bnRyaWVzLCBsYW5kIH0gPSB0b3BvbG9neS5vYmplY3RzO1xuICAgICAgc2V0RGF0YSh7XG4gICAgICAgIGNvdW50cmllczogZmVhdHVyZSh0b3BvbG9neSwgY291bnRyaWVzKSxcbiAgICAgICAgaW50ZXJpb3JzOiBtZXNoKHRvcG9sb2d5LCBjb3VudHJpZXMsIChhLCBiKSA9PiBhICE9PSBiKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCJpbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3N2IH0gZnJvbSAnZDMnO1xuXG5jb25zdCBjc3ZVcmwgPVxuICAnaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mbWVqaWFzLzhkZjJhMjdmMTI4NTU3NmFlM2NmNGQ2N2MzMzY4MTQ0L3Jhdy9tZW50YWxfaGVhbHRoX2Rpc29yZGVyc191bmVtcGxveW1lbnRfYW5kX3N1aWNpZGVzLmNzdic7XG5cbmNvbnN0IHJvdyA9IGQgPT4ge1xuICBkLlllYXIgPSBuZXcgRGF0ZShkLlllYXIsIDApO1xuICBkLkNvdW50cnlQb3B1bGF0aW9uV2l0aE1lbnRhbElsbG5lc3MgPSArZFsnVG90YWxQZXJjZW50YWdlT2ZQb3B1bGF0aW9uJ107XG4gIHJldHVybiBkO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZURhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY3N2KGNzdlVybCwgcm93KS50aGVuKHNldERhdGEpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzdiB9IGZyb20gJ2QzJztcblxuY29uc3QgY3N2VXJsID1cbiAgJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sdWtlcy9JU08tMzE2Ni1Db3VudHJpZXMtd2l0aC1SZWdpb25hbC1Db2Rlcy9tYXN0ZXIvc2xpbS0zL3NsaW0tMy5jc3YnO1xuXG5leHBvcnQgY29uc3QgdXNlQ29kZXMgPSAoKSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY3N2KGNzdlVybCkudGhlbihzZXREYXRhKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsImltcG9ydCB7IGdlb05hdHVyYWxFYXJ0aDEsIGdlb1BhdGgsIGdlb0dyYXRpY3VsZSB9IGZyb20gJ2QzJztcblxuY29uc3Qgd2lkdGggPSA5NjA7XG5jb25zdCBoZWlnaHQgPSA1MDA7XG5cbmNvbnN0IHByb2plY3Rpb24gPSBnZW9OYXR1cmFsRWFydGgxKClcbiAgLnNjYWxlKDEyMClcbiAgLnJvdGF0ZShbMCwgMF0pXG4gIC5jZW50ZXIoWzAsIDBdKVxuICAudHJhbnNsYXRlKFt3aWR0aCAvIDIsIGhlaWdodCAvIDIgLSA0MF0pO1xuXG5jb25zdCBwYXRoID0gZ2VvUGF0aChwcm9qZWN0aW9uKTtcbmNvbnN0IGdyYXRpY3VsZSA9IGdlb0dyYXRpY3VsZSgpO1xuXG5jb25zdCBtaXNzaW5nRGF0YUNvbG9yID0gJ2JsYWNrJztcblxuZXhwb3J0IGNvbnN0IE1hcmtzID0gKHtcbiAgd29ybGRBdGxhczogeyBjb3VudHJpZXMsIGludGVyaW9ycyB9LFxuICByb3dCeU51bWVyaWNDb2RlLFxuICBjb2xvclNjYWxlLFxuICBjb2xvclZhbHVlLFxufSkgPT4gKFxuICA8ZyBjbGFzc05hbWU9XCJtYXJrc1wiPlxuICAgIHtjb3VudHJpZXMuZmVhdHVyZXMubWFwKChmZWF0dXJlKSA9PiB7XG4gICAgICBjb25zdCBkID0gcm93QnlOdW1lcmljQ29kZS5nZXQoZmVhdHVyZS5pZCk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxwYXRoIGNsYXNzPXtcImNvdW50cnlcIn1cbiAgICAgICAgICBmaWxsPXtkID8gY29sb3JTY2FsZShjb2xvclZhbHVlKGQpKSA6IG1pc3NpbmdEYXRhQ29sb3J9XG4gICAgICAgICAgZD17cGF0aChmZWF0dXJlKX1cbiAgICAgICAgPlxuICAgICAgICAgIDwvcGF0aD5cbiAgICAgICk7XG4gICAgfSl9XG4gICAgPHBhdGggY2xhc3NOYW1lPVwiaW50ZXJpb3JzXCIgZD17cGF0aChpbnRlcmlvcnMpfSAvPlxuICA8L2c+XG4pO1xuIiwiZXhwb3J0IGNvbnN0IENvbG9yTGVnZW5kID0gKHsgY29sb3JTY2FsZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tTcGFjaW5nID0gMjAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrU2l6ZSA9IDEwLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlja1RleHRPZmZzZXQgPSAyMH0pID0+XG5cdGNvbG9yU2NhbGUudGlja3MoKS5tYXAoKHQsIGkpID0+IChcbiAgICAvLyBUaGlzIGxpbmUgPGcgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKDAsICR7aSAqIDEwMH0pYH0+XG4gICAgLy8gaXMgdXNlZCB0byBhZGQgdGhlIHZlcnRpY2FsIHNwYWNlIG9mIHdoaWNoIGVhY2ggdGV4dFxuICAgIC8vIGlzIGdvaW5nIHRvIGJlIHNlcGFyYXRlZFxuICAgIDxnIGNsYXNzTmFtZT1cInRpY2tcIiB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoMzAsICR7aSAqIHRpY2tTcGFjaW5nICsgNTB9KWB9PlxuICAgICAgPGNpcmNsZSBmaWxsPXtjb2xvclNjYWxlKHQpfSByPXt0aWNrU2l6ZX0gLz5cbiAgICAgIDx0ZXh0IHg9e3RpY2tUZXh0T2Zmc2V0fSBkeT1cIi4zMmVtXCI+IHt0ICsgXCIlIC0gXCIgKyAoMiooaSsxKSkgKyBcIiVcIn0gPC90ZXh0PlxuICAgIDwvZz5cbiAgKSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaW50ZXJwb2xhdGVQdUJ1LCBzY2FsZVNlcXVlbnRpYWwsIG1heCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IE1hcmtzIH0gZnJvbSAnLi9NYXJrcyc7XG5pbXBvcnQgeyBDb2xvckxlZ2VuZCB9IGZyb20gJy4vQ29sb3JMZWdlbmQnO1xuXG5leHBvcnQgY29uc3QgV29ybGRNYXAgPSAoe2RhdGEsIGNvZGVzLCBzZWxlY3RlZFllYXIsIHdvcmxkQXRsYXN9KSA9PiB7XG4gIFx0Y29uc3QgbnVtZXJpY0NvZGVCeUFscGhhQ29kZSA9IG5ldyBNYXAoKTtcbiAgICBjb2Rlcy5mb3JFYWNoKGNvZGUgPT4ge1xuICAgICAgY29uc3QgYWxwaGEzQ29kZSA9IGNvZGVbXCJhbHBoYS0zXCJdO1xuICAgICAgY29uc3QgbnVtZXJpY0NvZGUgPSBjb2RlW1wiY291bnRyeS1jb2RlXCJdO1xuICAgICAgbnVtZXJpY0NvZGVCeUFscGhhQ29kZS5zZXQoYWxwaGEzQ29kZSwgbnVtZXJpY0NvZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gRmlsdGVyIERhdGEgQnkgWWVhciAyMDE3XG4gICAgY29uc3QgZmlsdGVyZWREYXRhID0gZGF0YS5maWx0ZXIoZCA9PiBkLlllYXIuZ2V0RnVsbFllYXIoKSA9PT0gc2VsZWN0ZWRZZWFyLmdldEZ1bGxZZWFyKCkpO1xuXG4gICAgY29uc3Qgcm93QnlOdW1lcmljQ29kZSA9IG5ldyBNYXAoKTtcbiAgICBmaWx0ZXJlZERhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgIGNvbnN0IGFscGhhM0NvZGUgPSBkLkNvZGU7XG4gICAgICBjb25zdCBudW1lcmljQ29kZSA9IG51bWVyaWNDb2RlQnlBbHBoYUNvZGUuZ2V0KGFscGhhM0NvZGUpO1xuICAgICAgcm93QnlOdW1lcmljQ29kZS5zZXQobnVtZXJpY0NvZGUsIGQpO1xuICAgIH0pO1xuICBcbiAgICAvLyBDb3VudHJ5IHBvcHVsYXRpb24gdGhhdCBzdWZmZXIgYSBtZW50YWwgaWxsbmVzc1xuICAgIGNvbnN0IGNvbG9yVmFsdWUgPSBkID0+IGQuQ291bnRyeVBvcHVsYXRpb25XaXRoTWVudGFsSWxsbmVzcztcblxuICAgIC8vIENvbG9yIHNjYWxlIFxuICAgIGNvbnN0IGNvbG9yU2NhbGUgPSBzY2FsZVNlcXVlbnRpYWwoZDMuaW50ZXJwb2xhdGVCbHVlcylcbiAgICAgIC5kb21haW4oWzAsIG1heChkYXRhLCBjb2xvclZhbHVlKV0pO1xuICBcbiAgXHRjb2xvclNjYWxlLmRvbWFpbigpLm1hcCgoZG9tYWluVmFsdWUsIGkpID0+IChcbiAgICBcdGNvbnNvbGUubG9nKGkpXG4gICAgKSk7XG4gIFxuICAgIFxuICAgIHJldHVybiAoIFxuICAgICAgPD5cbiAgICAgIDxnIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgyMCwgMjApYH0+XG4gICAgICAgIDxDb2xvckxlZ2VuZFxuICAgICAgICAgIHRpY2tTcGFjaW5nPXsyMn1cbiAgICAgICAgICB0aWNrU2l6ZT17N31cbiAgICAgICAgICB0aWNrVGV4dE9mZnNldD17MTJ9XG4gICAgICAgICAgY29sb3JTY2FsZT17Y29sb3JTY2FsZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGcgY2xhc3NOYW1lPVwidGlja1wiIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgzMCwgJHsyNzB9KWB9PlxuICAgICAgICAgIDxjaXJjbGUgZmlsbD17XCJibGFja1wifSByPXs3fSAvPlxuICAgICAgICAgIDx0ZXh0IHg9ezEyfSBkeT1cIi4zMmVtXCI+IHtcIk1pc3NpbmcgRGF0YVwifSA8L3RleHQ+XG4gICAgICAgIDwvZz5cbiAgICAgIDwvZz5cbiAgICAgIDxNYXJrc1xuICAgICAgICB3b3JsZEF0bGFzPXt3b3JsZEF0bGFzfVxuICAgICAgICByb3dCeU51bWVyaWNDb2RlPXtyb3dCeU51bWVyaWNDb2RlfVxuICAgICAgICBjb2xvclNjYWxlPXtjb2xvclNjYWxlfVxuICAgICAgICBjb2xvclZhbHVlPXtjb2xvclZhbHVlfVxuICAgICAgLz5cbiAgICAgICAgPC8+XG4gICAgKTtcbiB9OyIsImV4cG9ydCBjb25zdCBBeGlzQm90dG9tID0gKHtcbiAgeFNjYWxlLFxuICBpbm5lckhlaWdodCxcbiAgdGlja0Zvcm1hdCxcbiAgdGlja09mZnNldCA9IDMsXG59KSA9PlxuICB4U2NhbGUudGlja3MoKS5tYXAoKHRpY2tWYWx1ZSkgPT4gKFxuICAgIDxnXG4gICAgICBjbGFzc05hbWU9XCJ0aWNrXCJcbiAgICAgIGtleT17dGlja1ZhbHVlfVxuICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7eFNjYWxlKHRpY2tWYWx1ZSl9LDApYH1cbiAgICA+XG4gICAgICA8bGluZSB5Mj17aW5uZXJIZWlnaHR9IC8+XG4gICAgICA8dGV4dFxuICAgICAgICBzdHlsZT17eyB0ZXh0QW5jaG9yOiAnbWlkZGxlJyB9fVxuICAgICAgICBkeT1cIi43MWVtXCJcbiAgICAgICAgeT17aW5uZXJIZWlnaHQgKyB0aWNrT2Zmc2V0fVxuICAgICAgPlxuICAgICAgICB7dGlja0Zvcm1hdCh0aWNrVmFsdWUpfVxuICAgICAgPC90ZXh0PlxuICAgIDwvZz5cbiAgKSk7XG4iLCJleHBvcnQgY29uc3QgQXhpc0xlZnQgPSAoeyB5U2NhbGUsIHlBeGlzVGlja0Zvcm1hdCwgaW5uZXJXaWR0aCwgdGlja09mZnNldCA9IDMgfSkgPT5cbiAgeVNjYWxlLnRpY2tzKDQpLm1hcCh0aWNrVmFsdWUgPT4gKFxuICAgIDxnIGNsYXNzTmFtZT1cInRpY2tcIiB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoMCwke3lTY2FsZSh0aWNrVmFsdWUpfSlgfT5cbiAgICAgIDxsaW5lIHgyPXtpbm5lcldpZHRofSAvPlxuICAgICAgPHRleHRcbiAgICAgICAga2V5PXt0aWNrVmFsdWV9XG4gICAgICAgIHN0eWxlPXt7IHRleHRBbmNob3I6ICdlbmQnIH19XG4gICAgICAgIHg9ey10aWNrT2Zmc2V0fVxuICAgICAgICBkeT1cIi4zMmVtXCJcbiAgICAgID5cbiAgICAgICAge3RpY2tWYWx1ZX1cbiAgICAgIDwvdGV4dD5cbiAgICA8L2c+XG4gICkpO1xuIiwiaW1wb3J0IHsgbGluZSwgY3VydmVOYXR1cmFsIH0gZnJvbSAnZDMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IExpbmVDaGFydE1hcmtzID0gKHtcbiAgZGF0YSxcbiAgeFNjYWxlLFxuICB5U2NhbGUsXG4gIHhWYWx1ZSxcbiAgeVZhbHVlLFxuICB0b29sdGlwRm9ybWF0LFxuICBpbm5lckhlaWdodCxcbiAgY291bnRyeUZpbHRlcixcbiAgY291bnRyaWVzXG59KSA9PiAoXG5cbjxnIGNsYXNzTmFtZT1cIm1hcmtzXCI+XG5cbiAge2NvdW50cmllcy5tYXAoY291bnRyeSA9PiB7XG4gICAgY29uc3QgZmlsdGVyZWREYXRhID0gY291bnRyeUZpbHRlcihjb3VudHJ5KTtcbiAgICByZXR1cm4gPHBhdGhcbiAgICAgIGZpbGw9XCJub25lXCJcbiAgICAgIHN0cm9rZT1cImJsYWNrXCJcbiAgICAgIGQ9e2xpbmUoKVxuICAgICAgICAueChkID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxuICAgICAgICAueShkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuICAgICAgICAuY3VydmUoY3VydmVOYXR1cmFsKShmaWx0ZXJlZERhdGEpfSBcblxuICAgIC8+XG4gICB9KVxuICB9XG4gIFxuPC9nPlxuICBcbik7XG5cbmZ1bmN0aW9uIGFyZUVxdWFsKHByZXZQcm9wcywgbmV4dFByb3BzKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY29uc3QgTWVtb2l6ZWRMaW5lQ2hhcnRNYXJrcyA9IFJlYWN0Lm1lbW8oTGluZUNoYXJ0TWFya3MsIGFyZUVxdWFsKTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzY2FsZUxpbmVhciwgc2NhbGVUaW1lLCB0aW1lRm9ybWF0LCBleHRlbnQgfSBmcm9tICdkMyc7XG5pbXBvcnQgeyBBeGlzQm90dG9tIH0gZnJvbSAnLi9BeGlzQm90dG9tJztcbmltcG9ydCB7IEF4aXNMZWZ0IH0gZnJvbSAnLi9BeGlzTGVmdCc7XG5pbXBvcnQgeyBNZW1vaXplZExpbmVDaGFydE1hcmtzIH0gZnJvbSAnLi9MaW5lQ2hhcnRNYXJrcyc7XG5cbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAwLCByaWdodDogMzAsIGJvdHRvbTogMjAsIGxlZnQ6IDUwIH07XG5jb25zdCB4QXhpc0xhYmVsT2Zmc2V0ID0gNTA7XG5jb25zdCB5QXhpc0xhYmVsT2Zmc2V0ID0gMzA7XG5cbmV4cG9ydCBjb25zdCBMaW5lQ2hhcnQgPSAoe1xuICBkYXRhLFxuICBzZWxlY3RlZFllYXIsXG4gIHdpZHRoLFxuICBoZWlnaHQsXG59KSA9PiB7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBcbiAgLy8gR2V0IGFsbCBjb3VudHJpZXMgbmFtZXNcbiAgdmFyIGNvdW50cmllc0xpc3QgPSBbXTtcbiAgY29uc3QgZ2V0Q291bnRyaWVzRnJvbURhdGEgPSBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGQpIHtcbiAgICBjb3VudHJpZXNMaXN0LnB1c2goZC5FbnRpdHkpO1xuICB9KTtcblxuICAvLyBHZXQgYWxsIHVuaXF1ZSBjb3VudHJpZXMgbmFtZXNcbiAgY29uc3QgdW5pcXVlQ291bnRyaWVzTGlzdCA9IEFycmF5LmZyb20obmV3IFNldChjb3VudHJpZXNMaXN0KSk7XG5cbiAgLy8gRmlsdGVyZWQgY3N2IGRhdGEgYnkgY291bnRyeSBuYW1lXG4gIGZ1bmN0aW9uIGZpbHRlckJ5Q291bnRyeU5hbWUoY291bnRyeU5hbWUpIHtcbiAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgaWYgKGRbJ0VudGl0eSddID09IGNvdW50cnlOYW1lKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpbHRlcmVkRGF0YTtcbiAgfVxuXG4gIGNvbnN0IHlWYWx1ZSA9IChkKSA9PiBkLkNvdW50cnlQb3B1bGF0aW9uV2l0aE1lbnRhbElsbG5lc3M7XG4gIGNvbnN0IHlBeGlzTGFiZWwgPSAnUG9wdWxhdGlvbiB3aXRoIG1lbnRhbCBpbGxuZXNzJztcblxuICBjb25zdCB4VmFsdWUgPSAoZCkgPT4gZC5ZZWFyO1xuICBjb25zdCB4QXhpc0xhYmVsID0gJ1llYXJzJztcbiAgY29uc3QgeEF4aXNUaWNrRm9ybWF0ID0gdGltZUZvcm1hdCgnJVknKTtcblxuICBjb25zdCB4U2NhbGUgPSBzY2FsZVRpbWUoKVxuICAgIC5kb21haW4oZXh0ZW50KGRhdGEsIHhWYWx1ZSkpXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSlcbiAgICAubmljZSgpO1xuXG4gIGNvbnN0IHlTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgICAuZG9tYWluKGV4dGVudChkYXRhLCB5VmFsdWUpKVxuICAgIC5yYW5nZShbaW5uZXJIZWlnaHQsIDBdKVxuICAgIC5uaWNlKCk7XG4gIFxuICBjb25zdCB5QXhpc1RpY2tGb3JtYXQgPSB5U2NhbGUudGlja0Zvcm1hdCg1LCBcIislXCIpO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxyZWN0IHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IGZpbGw9XCJ3aGl0ZVwiIC8+XG4gICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgfT5cbiAgICAgICAgPEF4aXNCb3R0b21cbiAgICAgICAgICB4U2NhbGU9e3hTY2FsZX1cbiAgICAgICAgICBpbm5lckhlaWdodD17aW5uZXJIZWlnaHR9XG4gICAgICAgICAgdGlja0Zvcm1hdD17eEF4aXNUaWNrRm9ybWF0fVxuICAgICAgICAgIHRpY2tPZmZzZXQ9ezV9XG4gICAgICAgIC8+XG4gICAgICAgIDx0ZXh0XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYXhpcy1sYWJlbFwiXG4gICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICAgICAgdHJhbnNmb3JtPXtgdHJhbnNsYXRlKCR7LXlBeGlzTGFiZWxPZmZzZXR9LCR7XG4gICAgICAgICAgICBpbm5lckhlaWdodCAvIDJcbiAgICAgICAgICB9KSByb3RhdGUoLTkwKWB9XG4gICAgICAgID5cbiAgICAgICAgICB7eUF4aXNMYWJlbH1cbiAgICAgICAgPC90ZXh0PlxuICAgICAgICA8QXhpc0xlZnQgeVNjYWxlPXt5U2NhbGV9IHRpY2tGb3JtYXQ9e3lBeGlzVGlja0Zvcm1hdH0gaW5uZXJXaWR0aD17aW5uZXJXaWR0aH0gdGlja09mZnNldD17N30gLz5cbiAgICAgICAgPHRleHRcbiAgICAgICAgICBjbGFzc05hbWU9XCJheGlzLWxhYmVsXCJcbiAgICAgICAgICB4PXtpbm5lcldpZHRoIC8gMn1cbiAgICAgICAgICB5PXtpbm5lckhlaWdodCArIHhBeGlzTGFiZWxPZmZzZXR9XG4gICAgICAgICAgdGV4dEFuY2hvcj1cIm1pZGRsZVwiXG4gICAgICAgID5cbiAgICAgICAgICB7eEF4aXNMYWJlbH1cbiAgICAgICAgPC90ZXh0PlxuICAgICAgICA8TWVtb2l6ZWRMaW5lQ2hhcnRNYXJrc1xuICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgeFNjYWxlPXt4U2NhbGV9XG4gICAgICAgICAgeVNjYWxlPXt5U2NhbGV9XG4gICAgICAgICAgeFZhbHVlPXt4VmFsdWV9XG4gICAgICAgICAgeVZhbHVlPXt5VmFsdWV9XG4gICAgICAgICAgdG9vbHRpcEZvcm1hdD17eEF4aXNUaWNrRm9ybWF0fVxuICAgICAgICAgIGlubmVySGVpZ2h0PXtpbm5lckhlaWdodH1cbiAgICAgICAgICBjb3VudHJ5RmlsdGVyPXtmaWx0ZXJCeUNvdW50cnlOYW1lfVxuICAgICAgICAgIGNvdW50cmllcz17dW5pcXVlQ291bnRyaWVzTGlzdH1cbiAgICAgICAgLz5cbiAgICAgICAgPGxpbmVcbiAgICAgICAgICB4MT17eFNjYWxlKHNlbGVjdGVkWWVhcil9XG4gICAgICAgICAgeDI9e3hTY2FsZShzZWxlY3RlZFllYXIpfVxuICAgICAgICAgIHkxPXswfVxuICAgICAgICAgIHkyPXtpbm5lckhlaWdodH1cbiAgICAgICAgICBzdHJva2U9XCJibGFja1wiXG4gICAgICAgICAgc3Ryb2tlLXdpZHRoPVwiNVwiXG4gICAgICAgIC8+XG4gICAgICA8L2c+XG4gICAgPC8+XG4gICk7XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBzY2FsZVRpbWUsIGV4dGVudCB9IGZyb20gJ2QzJztcbmltcG9ydCB7IHVzZVdvcmxkQXRsYXMgfSBmcm9tICcuL3VzZVdvcmxkQXRsYXMnO1xuaW1wb3J0IHsgdXNlRGF0YSB9IGZyb20gJy4vdXNlRGF0YSc7XG5pbXBvcnQgeyB1c2VDb2RlcyB9IGZyb20gJy4vdXNlQ29kZXMnO1xuaW1wb3J0IHsgV29ybGRNYXAgfSBmcm9tICcuL1dvcmxkTWFwL2luZGV4LmpzJztcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJy4vTGluZUNoYXJ0L2luZGV4LmpzJztcblxuY29uc3Qgd2lkdGggPSA5NjA7XG5jb25zdCBoZWlnaHQgPSA1MDA7XG5jb25zdCBsaW5lQ2hhcnRTaXplID0gMC4yO1xuY29uc3QgbWFyZ2luID0geyB0b3A6IDAsIHJpZ2h0OiAzMCwgYm90dG9tOiAzMCwgbGVmdDogNTAgfTtcbmNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG4gIGNvbnN0IHdvcmxkQXRsYXMgPSB1c2VXb3JsZEF0bGFzKCk7XG4gIGNvbnN0IGRhdGEgPSB1c2VEYXRhKCk7XG4gIGNvbnN0IGNvZGVzID0gdXNlQ29kZXMoKTtcbiAgY29uc3QgaW5pdGlhbE1vdXNlUG9zaXRpb24gPSB7IHg6IGlubmVyV2lkdGggLyAyLCB5OiBoZWlnaHQgLSAxMzAgfTtcbiAgY29uc3QgW21vdXNlUG9zaXRpb24sIHNldE1vdXNlUG9zaXRpb25dID0gdXNlU3RhdGUoaW5pdGlhbE1vdXNlUG9zaXRpb24pO1xuXG4gIGNvbnN0IGhhbmRsZU1vdXNlTW92ZSA9IHVzZUNhbGxiYWNrKFxuICAgIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgeyBjbGllbnRYLCBjbGllbnRZIH0gPSBldmVudDtcbiAgICAgIGlmIChcbiAgICAgICAgY2xpZW50WCA+IDAgJiZcbiAgICAgICAgY2xpZW50WCA8IHdpZHRoIC0gMTMwICYmXG4gICAgICAgIGNsaWVudFkgPiA0MDAgJiZcbiAgICAgICAgY2xpZW50WSA8IGhlaWdodFxuICAgICAgKSB7XG4gICAgICAgIHNldE1vdXNlUG9zaXRpb24oeyB4OiBjbGllbnRYLCB5OiBjbGllbnRZIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NldE1vdXNlUG9zaXRpb25dXG4gICk7XG5cbiAgaWYgKCF3b3JsZEF0bGFzIHx8ICFkYXRhIHx8ICFjb2Rlcykge1xuICAgIHJldHVybiA8cHJlPkxvYWRpbmcuLi48L3ByZT47XG4gIH1cblxuICBjb25zdCB4VmFsdWUgPSAoZCkgPT4gZC5ZZWFyO1xuICBjb25zdCB4U2NhbGUgPSBzY2FsZVRpbWUoKVxuICAgIC5kb21haW4oZXh0ZW50KGRhdGEsIHhWYWx1ZSkpXG4gICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSlcbiAgICAubmljZSgpO1xuXG4gIC8vIEdldCBzZWxlY3RlZCB5ZWFyIGJ5IG1vdmluZyB0aGUgdmVydGljYWwgbGluZVxuICBjb25zdCBzZWxlY3RlZFllYXIgPSB4U2NhbGUuaW52ZXJ0KG1vdXNlUG9zaXRpb24ueCk7XG5cbiAgcmV0dXJuIChcbiAgICA8c3ZnIHdpZHRoPXt3aWR0aH0gaGVpZ2h0PXtoZWlnaHR9IG9uTW91c2VNb3ZlPXtoYW5kbGVNb3VzZU1vdmV9PlxuICAgICAgXG4gICAgICA8V29ybGRNYXBcbiAgICAgICAgZGF0YT17ZGF0YX1cbiAgICAgICAgY29kZXM9e2NvZGVzfVxuICAgICAgICBzZWxlY3RlZFllYXI9e3NlbGVjdGVkWWVhcn1cbiAgICAgICAgd29ybGRBdGxhcz17d29ybGRBdGxhc31cbiAgICAgIC8+XG4gICAgICA8ZyB0cmFuc2Zvcm09e2B0cmFuc2xhdGUoMCwgJHtoZWlnaHQgLSBsaW5lQ2hhcnRTaXplICogaGVpZ2h0fSlgfT5cbiAgICAgICAgPExpbmVDaGFydFxuICAgICAgICAgIGRhdGE9e2RhdGF9XG4gICAgICAgICAgc2VsZWN0ZWRZZWFyPXtzZWxlY3RlZFllYXJ9XG4gICAgICAgICAgd2lkdGg9e3dpZHRofVxuICAgICAgICAgIGhlaWdodD17bGluZUNoYXJ0U2l6ZSAqIGhlaWdodH1cbiAgICAgICAgLz5cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG5jb25zdCByb290RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jyk7XG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgcm9vdEVsZW1lbnQpO1xuIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwianNvbiIsImZlYXR1cmUiLCJtZXNoIiwiY3N2IiwiY3N2VXJsIiwiZ2VvTmF0dXJhbEVhcnRoMSIsImdlb1BhdGgiLCJnZW9HcmF0aWN1bGUiLCJzY2FsZVNlcXVlbnRpYWwiLCJtYXgiLCJSZWFjdCIsImxpbmUiLCJjdXJ2ZU5hdHVyYWwiLCJ0aW1lRm9ybWF0Iiwic2NhbGVUaW1lIiwiZXh0ZW50Iiwic2NhbGVMaW5lYXIiLCJ3aWR0aCIsImhlaWdodCIsIm1hcmdpbiIsInVzZUNhbGxiYWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7RUFJQSxNQUFNLE9BQU8sR0FBRyx3REFBd0QsQ0FBQztBQUN6RTtFQUNPLE1BQU0sYUFBYSxHQUFHLE1BQU07RUFDbkMsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHQSxnQkFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDO0VBQ0EsRUFBRUMsaUJBQVMsQ0FBQyxNQUFNO0VBQ2xCLElBQUlDLFNBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJO0VBQ25DLE1BQU0sTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0VBQ25ELE1BQU0sT0FBTyxDQUFDO0VBQ2QsUUFBUSxTQUFTLEVBQUVDLGdCQUFPLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQztF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