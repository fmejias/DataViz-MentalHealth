(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/fmejias/8df2a27f1285576ae3cf4d67c3368144/raw/mental_health_disorders_unemployment_and_suicides.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Year = new Date(d.Year, 0);
        d.Schizophrenia = +d.Schizophrenia;
        d.AlcoholUseDisorders = +d.AlcoholUseDisorders;
        d.DrugUseDisorders = +d.DrugUseDisorders;
        d.DepressiveDisorders = +d.DepressiveDisorders;
        d.BipolarDisorder = +d.BipolarDisorder;
        d.AnxietyDisorders = +d.AnxietyDisorders;
        d.EatingDisorders = +d.EatingDisorders;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks(6).map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat,
    circleRadius
  }) => (

  React.createElement( 'g', { className: "marks" },

  	React.createElement( 'path', {
      fill: "none", stroke: "black", d: d3.line()
        .x(d => xScale(xValue(d)))
        .y(d => yScale(yValue(d)))
      	.curve(d3.curveNatural)(data) })
    
    
  )
    
  );

  const width = 960;
  const height = 500;
  const margin = { top: 20, right: 30, bottom: 165, left: 90 };
  const xAxisLabelOffset = 50;

  // This is used to move the label from the y axis values
  const yAxisLabelOffset = 60;

  const attributes = [
      {value: "AlcoholUseDisorders", label: 'Alcohol Use Disorders'},
      {value: "DrugUseDisorders", label: 'Drug Use Disorders'},
      {value: "DepressiveDisorders", label: 'Depressive Disorders'},
      {value: "BipolarDisorder", label: 'Bipolar Disorder'},
      {value: "AnxietyDisorders", label: 'Anxiety Disorders'},
    	{value: "EatingDisorders", label: 'Eating Disorders'},
    	{value: "Schizophrenia", label: 'Schizophrenia'}
  ];

  const App = () => {
    const data = useData();
    
    // Mental disease menu
    const initialYAttribute = 'Schizophrenia';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yValue = d => d[yAttribute];
    const yAxisLabel = "Percentage of the Population ";
    
    // Country Filter Menu
    const initialCountryAttribute = 'Costa Rica';
    const [countryAttribute, setCountryAttribute] = React$1.useState(initialCountryAttribute);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    // Get all countries names
    var countriesList = [];
    const getCountriesFromData = data.forEach(function(d) {
      countriesList.push(d.Entity);
    });
    
    // Get all unique countries names
    const uniqueCountriesList = Array.from(new Set(countriesList));
    
    const countriesDictionaryList = [];
    uniqueCountriesList.map(country => {
      countriesDictionaryList.push({
        value:   country,
        label: country
    	});
    });
    
    // Filter Costa Rica Data
    const filteredData = data.filter(function(d) 
  	{ 
  		if(d["Entity"] == countryAttribute){ 
        return d;
      } 
    });

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const xValue = d => d.Year;
    const xAxisLabel = 'Years';
    const xAxisTickFormat = d3.timeFormat('%Y');

    const xScale = d3.scaleTime()
      .domain(d3.extent(filteredData, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3.scaleLinear()
      .domain(d3.extent(filteredData, yValue))
      .range([innerHeight, 0])
    	.nice();

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Country"),
          React$1__default.createElement( ReactDropdown, { 
            options: countriesDictionaryList, value: countryAttribute, onChange: ({value}) => setCountryAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Mental disease"),
          React$1__default.createElement( ReactDropdown, { 
            options: attributes, value: yAttribute, onChange: ({value}) => setYAttribute(value) })
      	),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 7 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
              2}) rotate(-90)` },
              yAxisLabel
            ),
            React$1__default.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 7 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
            React$1__default.createElement( Marks, {
              data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat, circleRadius: 3 })
          )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,