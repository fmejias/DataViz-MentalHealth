(function (React$1, ReactDOM, d3$1, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/fmejias/8df2a27f1285576ae3cf4d67c3368144/raw/mental_health_disorders_unemployment_and_suicides.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.Unemployment = +d.Unemployment;
        d.TotalPercentageOfPopulation = +d.TotalPercentageOfPopulation;
        return d;
      };
      d3$1.csv(csvUrl, row).then(setData);
    }, []);
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick" },
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em", y: yScale(tickValue) + yScale.bandwidth() / 2 },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    xValueTotalPercentageOfPopulation,
    tooltipFormat
  }) =>
    data.map(d => (
      React.createElement( React.Fragment, null,
        React.createElement( 'rect', {
          key: yValue(d), x: 0, y: yScale("Unemployment"), width: xScale(xValue(d)), height: yScale.bandwidth(), fill: "orange" },

          React.createElement( 'title', null, tooltipFormat(xValue(d)) )
        ),

        React.createElement( 'rect', {
          className: "mark", key: yValue(d), x: 0, y: yScale("TotalPercentageOfPopulation"), width: xScale(xValueTotalPercentageOfPopulation(d)), height: yScale.bandwidth() },

          React.createElement( 'title', null, tooltipFormat(xValue(d)) )
        )
      )
    ));

  const ColorLegend = ({ colorScale, 
                               tickSpacing = 20, 
                               tickSize = 10, 
                               tickTextOffset = 20,
                               onHover,
                               hoveredValue,
                               fadeOpacity}) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', { className: "tick", transform: `translate(0, ${i * tickSpacing})`, onMouseEnter: () => {onHover(domainValue);}, onMouseOut: () => {onHover(null);}, opacity: hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1 },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" }, " ", domainValue, " ")
      )
    ));

  const width = 960;
  const height = 500;
  const margin = { top: 20, right: 200, bottom: 135, left: 220 };
  const xAxisLabelOffset = 50;
  const yAxisLabelOffset = 110;

  const dropdownOptions = [
      {value: "1995", label: '1995'},
      {value: "2000", label: '2000'},
      {value: "2005", label: '2005'},
      {value: "2010", label: '2010'},
      {value: "2015", label: '2015'}
  ];

  const subgroups = ["Unemployment", "TotalPercentageOfPopulation"];
  const fadeOpacity = 0.2;

  const App = () => {
    const data = useData();
    const [hoveredValue, setHoveredValue] = React$1.useState(null);
    
    // Years menu
    const initialYear = '2005';
    const [year, setYear] = React$1.useState(initialYear);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    // Filter Data By year
    const filteredDataByYear = data.filter(function(d) 
  	{ 
  		if(d["Year"] == year){ 
        return d;
      } 
    });
    
    // Filter Data by Unemployment
    const filteredDataByUnemployment = filteredDataByYear.slice().sort((a, b) => d3.descending(a.Unemployment, b.Unemployment));
  	
    // Extract top 5 rows order by descending unemployment value
    const filteredData = filteredDataByUnemployment.slice(0, 5);

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const yValue = d => d.Entity;
    
    const xValue = d => d.Unemployment;
    const xValueTotalPercentageOfPopulation = d => d.TotalPercentageOfPopulation;

    const siFormat = d3$1.format('.2s');
    const xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');
    
    // Color Legend
    const circleRadius = 7;
    const colorScale = d3$1.scaleOrdinal()
      .domain(["Mental illness", 
               "Unemployment"])
      .range(['#137B80', 'orange']);
  	
    const yScale = d3$1.scaleBand()
      .domain(filteredData.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.5);
    
    const yScaleSubgroup1 = d3.scaleBand()
      .domain(subgroups)
      .range([0, yScale.bandwidth()])
      .padding([0.3]);
    
    const yScaleSubgroup2 = d3.scaleBand()
      .domain(subgroups)
      .range([2 * yScale.bandwidth(), 3 * yScale.bandwidth()])
      .padding([0.3]);
    
    const yScaleSubgroup3 = d3.scaleBand()
      .domain(subgroups)
      .range([4 * yScale.bandwidth(), 5 * yScale.bandwidth()])
      .padding([0.3]);
    
    const yScaleSubgroup4 = d3.scaleBand()
      .domain(subgroups)
      .range([6 * yScale.bandwidth(), 7 * yScale.bandwidth()])
      .padding([0.3]);
    
    const yScaleSubgroup5 = d3.scaleBand()
      .domain(subgroups)
      .range([8 * yScale.bandwidth(), 9 * yScale.bandwidth()])
      .padding([0.3]);

    const xScale = d3$1.scaleLinear()
      .domain([0, d3$1.max(filteredData, xValue)])
      .range([0, innerWidth]);

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Year"),
          React$1__default.createElement( ReactDropdown, { 
            options: dropdownOptions, value: year, onChange: ({value}) => setYear(value) })
      	),
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
            React$1__default.createElement( AxisLeft, { yScale: yScale }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "Percentage of the population"),
            
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
              2}) rotate(-90)` },
              "Countries"
            ),
            
            React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 40}, 20)` },
              
              React$1__default.createElement( ColorLegend, { 
                tickSpacing: 22, tickSize: circleRadius, tickTextOffset: 12, colorScale: colorScale, onHover: setHoveredValue, hoveredValue: hoveredValue, fadeOpacity: fadeOpacity })
            ),

            React$1__default.createElement( Marks, {
              data: filteredData.slice(0,1), xScale: xScale, yScale: yScaleSubgroup1, xValue: xValue, yValue: yValue, xValueTotalPercentageOfPopulation: xValueTotalPercentageOfPopulation, tooltipFormat: xAxisTickFormat }),

            React$1__default.createElement( Marks, {
              data: filteredData.slice(1,2), xScale: xScale, yScale: yScaleSubgroup2, xValue: xValue, yValue: yValue, xValueTotalPercentageOfPopulation: xValueTotalPercentageOfPopulation, tooltipFormat: xAxisTickFormat }),

            React$1__default.createElement( Marks, {
              data: filteredData.slice(2,3), xScale: xScale, yScale: yScaleSubgroup3, xValue: xValue, yValue: yValue, xValueTotalPercentageOfPopulation: xValueTotalPercentageOfPopulation, tooltipFormat: xAxisTickFormat }),

            React$1__default.createElement( Marks, {
              data: filteredData.slice(3,4), xScale: xScale, yScale: yScaleSubgroup4, xValue: xValue, yValue: yValue, xValueTotalPercentageOfPopulation: xValueTotalPercentageOfPopulation, tooltipFormat: xAxisTickFormat }),

            React$1__default.createElement( Marks, {
              data: filteredData.slice(4,5), xScale: xScale, yScale: yScaleSubgroup5, xValue: xValue, yValue: yValue, xValueTotalPercentageOfPopulation: xValueTotalPercentageOfPopulation, tooltipFormat: xAxisTickFormat })

          )
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,